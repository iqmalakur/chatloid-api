// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @db.Uuid @default(uuid())
  username   String       @unique @db.VarChar(100)
  googleId   String       @db.VarChar(64) @map("google_id")
  email      String       @unique @db.VarChar(255)
  name       String       @db.VarChar(100)
  picture    String       @db.VarChar(255)
  createdAt  DateTime     @db.Timestamp @default(now()) @map("created_at")
  updatedAt  DateTime     @db.Timestamp @updatedAt @map("updated_at")

  messages   Message[]
  contacts   Contact[]    @relation("ContactOwner")
  inContacts Contact[]    @relation("ContactTarget")
  chatRooms1 ChatRoom[]   @relation("User1")
  chatRooms2 ChatRoom[]   @relation("User2")
}

model Contact {
  userOneId  String   @db.Uuid @map("user_one_id")
  userTwoId  String   @db.Uuid @map("user_two_id")
  isAccepted Boolean  @default(false) @map("is_accepted")
  createdAt  DateTime @db.Timestamp() @default(now()) @map("created_at")

  userOne    User     @relation("ContactOwner", fields: [userOneId], references: [id])
  userTwo    User     @relation("ContactTarget", fields: [userTwoId], references: [id])

  @@id([userOneId, userTwoId])
  @@unique([userOneId, userTwoId])
}

model ChatRoom {
  id        String    @id @db.Uuid @default(uuid())
  user1Id   String    @db.Uuid @map("user1_id")
  user2Id   String    @db.Uuid @map("user2_id")
  createdAt DateTime  @db.Timestamp @default(now()) @map("created_at")

  user1     User      @relation("User1", fields: [user1Id], references: [id])
  user2     User      @relation("User2", fields: [user2Id], references: [id])
  messages  Message[]

  @@unique([user1Id, user2Id])
}

model Message {
  id         String    @id @db.Uuid @default(uuid())
  chatRoomId String    @db.Uuid @map("chat_room_id")
  senderId   String    @db.Uuid @map("sender_id")
  content    String    @db.Text
  sentAt     DateTime  @db.Timestamp @default(now()) @map("sent_at")
  editedAt   DateTime? @db.Timestamp @map("edited_at")
  deletedAt  DateTime? @db.Timestamp @map("deleted_at")

  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id])
  sender     User      @relation(fields: [senderId], references: [id])
}
